# use C-a, since it's on the home row and easier to hit than C-b
set-option -g prefix C-a
unbind-key C-a
bind-key C-a send-prefix

bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout

bind-key a last-pane
bind-key c new-window

# Smart pane switching between tmux and vim, with awareness of fzf
forward_programs="view|n?vim?|fzf"

should_forward="ps -o state= -o comm= -t '#{pane_tty}' \
                | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?($forward_programs)(diff)?$'"

## Navigate panes
bind -n C-h if-shell "$should_forward" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$should_forward" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$should_forward" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$should_forward" "send-keys C-l" "select-pane -R"

# Enable color support inside of tmux.
set -ga terminal-overrides ",*256col*:Tc"

set -g pane-border-style fg=colour240
set -g pane-active-border-style fg=colour243

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-sessionist'
set -g @plugin 'odedlaz/tmux-onedark-theme'

set -g @continuum-restore 'on'
set -g @continuum-boot-options 'iterm,fullscreen'

# toogle last window by hitting again C-f
bind-key C-a last-window

# if multiple clients are attached to the same window, maximize it to the
# bigger one
set-window-option -g aggressive-resize

# Start windows and pane numbering with index 1 instead of 0
set -g base-index 1
setw -g pane-base-index 1

# re-number windows when one is closed
set -g renumber-windows on

# word separators for automatic word selection
setw -g word-separators ' @"=()[]_-:,.'
setw -ag word-separators "'"

# Show times longer than supposed
set -g display-panes-time 2000

# tmux messages are displayed for 4 seconds
set -g display-time 4000

# {n}vim compability
set-option -ga terminal-overrides ",xterm-256color:Tc"
set -g default-terminal "screen-256color"

# Split horiziontal and vertical splits, instead of % and ". We also open them
# in the same directory.  Because we use widescreens nowadays, opening a
# vertical split that takes half of the screen is not worth. For vertical we
# only open 90 lines width, for horizontal it's 20 columns.
bind-key v split-window -h -l 90 -c '#{pane_current_path}'
bind-key s split-window -v -l 20 -c '#{pane_current_path}'

# Pressing Ctrl+Shift+Left (will move the current window to the left. Similarly
# right. No need to use the modifier (C-b).
bind-key -n S-Left swap-window -t -1\; select-window -t -1
bind-key -n S-Right swap-window -t +1\; select-window -t +1

# Source file
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# Update default binding of `Enter` and `Space to also use copy-pipe
unbind -T copy-mode-vi Enter
unbind -T copy-mode-vi Space

bind-key -T edit-mode-vi Up send-keys -X history-up
bind-key -T edit-mode-vi Down send-keys -X history-down

# setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection

# copy text with `y` in copy mode
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel

# copy text with mouse selection without pressing any key
bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-selection-and-cancel

# emacs key bindings in tmux command prompt (prefix + :) are better than
# vi keys, even for vim users
set -g status-keys vi
# Use vim keybindings in copy mode
setw -g mode-keys vi

# focus events enabled for terminals that support them
set -g focus-events on

# Sync panes (Send input to all panes in the window). When enabled, pane
# borders become red as an indication.
bind C-s if -F '#{pane_synchronized}' \
       'setw synchronize-panes off; \
       setw pane-active-border-style fg=colour63,bg=default; \
       setw pane-border-format       " #P "' \
       'setw synchronize-panes on; \
       setw pane-active-border-style fg=red; \
       setw pane-border-format       " #P - Pane Synchronization ON "'

# Faster command sequence
set -s escape-time 0

# Have a very large history
set -g history-limit 1000000

# Mouse mode on
set -g mouse on

# Set title
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'

# Equally resize all panes
bind-key = select-layout even-horizontal
bind-key | select-layout even-vertical

# Resize panes
bind-key -r j resize-pane -D 10
bind-key -r k resize-pane -U 10
bind-key -r h resize-pane -L 10
bind-key -r l resize-pane -R 10

# Disable confirm before killing
bind-key x kill-window

# Initialize TMUX plugin manager (
# ! keep this line at the very bottom of tmux.conf
run -b '~/.tmux/plugins/tpm/tpm'

# The followings are not any kind of setting for Tmux, but crucial to my
# own productivity. Setting them up is really pain, and I probably going to
# forget it. So I'm just putting them here again.

######## iTerm + Tmux key integration #########
# First of all, iTerm can send hex codes for shortcuts you define. So for
# example you can send a hex code for the shortcut "c-f v" which in my case
# opens a vertical pane (see setting above). The hex code for this combination
# is: 0x06 0x76. There are many cases to find it out. One of them is the tool
# 'xxd'

# If you run "xxd -psd" and hit "c-f v" and then enter and finally c-c to exit
# , it outputs the following:
#
# 	$ xxd -psd
# 	^Fv
# 	06760a^C
#
# What matters is the sequence  06760a^C where:
#
# 	06 -> c-f
# 	76 -> v
# 	0a -> return
#	^C -> c-c
#
# From here, we know that 0x06 0x76 corresponds to "c-f v".
#
# Finally, inside the iTerm2 Key settings, I'm adding just various shortcuts,
# such as cmd-j, cmd-left, etc.. , select the option "send hex code" in your 
# iterm profile selected and then enter the hex code which I want to be executed,
# hence the tmux sequence. So  when I press CMD + d in iterm, I send the sequence
# 0x06 0x76, which tmux inteprets it as opening a new pane. 

# We are using Command key for all mapping so first disable default iterm mapping.
# select 'No shortcut' in Command mappings under Keys -> Navigation Shortcuts

# Next step is to add a line to 'key_binding' setting in Alacritty:
#
#   - { key: D,        mods: Command,       chars: "\x06\x76"  } 
#
# That's it! The followings are the ones that I'm using:
#
#   key_bindings:
#     - { key: D,        mods: Command,       chars: "\x06\x76" } 
#     - { key: D,        mods: Command|Shift, chars: "\x06\x73" }
#     - { key: W,        mods: Command,       chars: "\x06\x78" }
#     - { key: H,        mods: Command,       chars: "\x06\x68" }
#     - { key: J,        mods: Command,       chars: "\x06\x6a" }
#     - { key: K,        mods: Command,       chars: "\x06\x6b" }
#     - { key: L,        mods: Command,       chars: "\x06\x6c" }
#     - { key: T,        mods: Command,       chars: "\x06\x63" }
#     - { key: Key1,     mods: Command,       chars: "\x06\x31" }
#     - { key: Key2,     mods: Command,       chars: "\x06\x32" }
#     - { key: Key3,     mods: Command,       chars: "\x06\x33" }
#     - { key: Key4,     mods: Command,       chars: "\x06\x34" }
#     - { key: Key5,     mods: Command,       chars: "\x06\x35" }
#     - { key: Key6,     mods: Command,       chars: "\x06\x36" }
#     - { key: Key7,     mods: Command,       chars: "\x06\x37" }
#     - { key: Key8,     mods: Command,       chars: "\x06\x38" }
#     - { key: Key9,     mods: Command,       chars: "\x06\x39" }
#     - { key: Left,     mods: Command,       chars: "\x06\x70" }
#     - { key: Down,     mods: Command,       chars: "\x06\x4a" }
#     - { key: Up,       mods: Command,       chars: "\x06\x4b" }
#     - { key: Right,    mods: Command,       chars: "\x06\x6e" }
